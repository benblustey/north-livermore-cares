---
import VideoPlaylist from './VideoPlaylist.astro';
import TableList from './TableList.astro';

interface VideoItem {
  title: string,
  length: string,
  thumbnail: string,
  src: string
}

interface Props {
  playlist: Array<VideoItem>
}

const { playlist } = Astro.props;

const items = [
    { src: 'http://vjs.zencdn.net/v/oceans.mp4', title: 'Sep 4', length: '00.35', thumbnail: 'thumbnail.jpg' },
    { src: 'http://vjs.zencdn.net/v/oceans.mp4', title: 'Sep 4', length: '00.35', thumbnail: '00.35' },
    { src: 'http://vjs.zencdn.net/v/oceans.mp4', title: 'Sep 4', length: '00.35', thumbnail: '00.35' }
];

---

<div class="video-wrapper">
  <video 
    id="video-player"
    poster="https://peach.blender.org/wp-content/uploads/title_anouncement.jpg?x11217"
    src="https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4"
    controls>
    Your browser does not support the video tag.
  </video>
  <VideoPlaylist content={playlist} />
  <TableList />
</div>

<script>
// Array of video sources
const videoPlayer = document.getElementById('video-player') as HTMLMediaElement;
const playlistElement = document.getElementById('playlist') as HTMLElement;
const videoCards = playlistElement.getElementsByClassName('video-card');
let currentVideoIndex = 0;

// Initialize the playlist UI
function initPlaylist() {
  for (let videoCard of videoCards) {
    let videoSrc = videoCard.getAttribute('data-video-src');
    videoCard.addEventListener('click', () => {
      loadVideo(videoSrc as string);
      highlightActiveVideo();
      videoPlayer.play();
    });
  }
}

// Load video based on index
function loadVideo(videoSrc: string) {
  videoPlayer.src = videoSrc;
}

// // Highlight the active video in the playlist
function highlightActiveVideo() {
  const items = playlistElement.querySelectorAll('li');
  items.forEach(item => item.classList.remove('active'));
  items[currentVideoIndex].classList.add('active');
}

// Event listener for ending the video
// videoPlayer.addEventListener('ended', () => {
//     currentVideoIndex = (currentVideoIndex + 1) % playlist.length; // Loop back to start
//     loadVideo(currentVideoIndex);
//     highlightActiveVideo();
//     videoPlayer.play();
// });

// Initialize the playlist
initPlaylist();
</script>